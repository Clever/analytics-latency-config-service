// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SchemaConfig SchemaConfig configures latency checks by schema
// swagger:model SchemaConfig
type SchemaConfig struct {

	// blacklist
	Blacklist []string `json:"blacklist"`

	// default thresholds
	DefaultThresholds *Thresholds `json:"defaultThresholds,omitempty"`

	// default timestamp column
	DefaultTimestampColumn string `json:"defaultTimestampColumn,omitempty"`

	// schema name
	SchemaName string `json:"schemaName,omitempty"`

	// SchemaOwner associates an owner for a given schema. It can be overridden at the table level. It defaults to eng-deip
	SchemaOwner string `json:"schemaOwner,omitempty"`

	// table overrides
	TableOverrides []*TableCheck `json:"tableOverrides"`

	// whitelist
	Whitelist []string `json:"whitelist"`
}

// Validate validates this schema config
func (m *SchemaConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlacklist(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultThresholds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTableOverrides(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWhitelist(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaConfig) validateBlacklist(formats strfmt.Registry) error {

	if swag.IsZero(m.Blacklist) { // not required
		return nil
	}

	return nil
}

func (m *SchemaConfig) validateDefaultThresholds(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultThresholds) { // not required
		return nil
	}

	if m.DefaultThresholds != nil {

		if err := m.DefaultThresholds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultThresholds")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaConfig) validateTableOverrides(formats strfmt.Registry) error {

	if swag.IsZero(m.TableOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.TableOverrides); i++ {

		if swag.IsZero(m.TableOverrides[i]) { // not required
			continue
		}

		if m.TableOverrides[i] != nil {

			if err := m.TableOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tableOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchemaConfig) validateWhitelist(formats strfmt.Registry) error {

	if swag.IsZero(m.Whitelist) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemaConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemaConfig) UnmarshalBinary(b []byte) error {
	var res SchemaConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
