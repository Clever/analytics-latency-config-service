// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// AnalyticsDatabase Analytics databases, in config
// swagger:model AnalyticsDatabase
type AnalyticsDatabase string

const (
	// AnalyticsDatabaseRedshiftProd captures enum value "RedshiftProd"
	AnalyticsDatabaseRedshiftProd AnalyticsDatabase = "RedshiftProd"
	// AnalyticsDatabaseRedshiftFast captures enum value "RedshiftFast"
	AnalyticsDatabaseRedshiftFast AnalyticsDatabase = "RedshiftFast"
	// AnalyticsDatabaseRdsInternal captures enum value "RdsInternal"
	AnalyticsDatabaseRdsInternal AnalyticsDatabase = "RdsInternal"
	// AnalyticsDatabaseRdsExternal captures enum value "RdsExternal"
	AnalyticsDatabaseRdsExternal AnalyticsDatabase = "RdsExternal"
)

// for schema
var analyticsDatabaseEnum []interface{}

func init() {
	var res []AnalyticsDatabase
	if err := json.Unmarshal([]byte(`["RedshiftProd","RedshiftFast","RdsInternal","RdsExternal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyticsDatabaseEnum = append(analyticsDatabaseEnum, v)
	}
}

func (m AnalyticsDatabase) validateAnalyticsDatabaseEnum(path, location string, value AnalyticsDatabase) error {
	if err := validate.Enum(path, location, value, analyticsDatabaseEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this analytics database
func (m AnalyticsDatabase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAnalyticsDatabaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
